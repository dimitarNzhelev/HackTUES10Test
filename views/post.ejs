<!DOCTYPE html>
<html lang="en">
  <head>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <% if(typeof post != "undefined" && typeof user != "undefined") { %>
    <title><%= post.caption %></title>
    <% } %>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
      }

      h1 {
        text-align: center;
        margin: 1em 0;
        font-size: 120px;
        color: #333;
      }

      p {
        margin: 0.5em 0;
        font-size: 80px;
        color: #555;
      }

      a {
        font-size: 40px;
        margin-right: 20px;
        color: #007bff;
        text-decoration: none;
      }

      button {
        font-size: 60px;
        height: 60px;
        width: 160px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .content {
        margin: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        padding: 2em;
      }

      .conteiner {
        display: flex;
      }

      .post-image {
        margin-left: 10%;
        width: 20%;
        height: 20%;
        border-radius: 10px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
      }

      .comment-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: 1em;
      }

      .comment {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        width: 90%;
        margin-bottom: 50px;
      }

      .comment h1 {
        margin: 0;
        font-size: 40px;
        color: #333;
      }

      .comment p {
        margin: 0.5em 0 0;
        font-size: 30px;
        color: #555;
      }

      .comment-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .comment-button:hover {
        background-color: #0056b3;
      }

      .like-button {
        background-color: transparent;
        border: none;
        padding: 0;
        font-size: 30px;
        color: #007bff;
        cursor: pointer;
        transition: color 0.3s ease;
      }

      .like-button:hover {
        color: #0056b3;
      }

      .like-button i {
        transition: color 0.2s ease-in-out;
      }

      .like-button i.fas {
        color: #e74c3c;
      }
    </style>

    <script>
      async function deleteCommentById(id, postId) {
        fetch("/dashboard/posts/" + postId + "/comments/" + id, {
          method: "DELETE",
        }).then((response) => {
          if (response.ok) {
            const count = document.getElementById("totalcomments");
            const updatedCount = parseInt(count.textContent.split(" ")[2]) - 1;
            count.textContent = `Total comments: ${updatedCount}`;
            window.location.reload();
          } else {
            console.error("Failed to delete comment");
          }
        });
      }

      function editComment(commentId, postid) {
        const commentElement = document.getElementById(`comment_${commentId}`);
        const commentText = commentElement.textContent;
        commentElement.innerHTML = `<input type="text" id="input_${commentId}" value="${commentText}" />`;
        const inputElement = document.getElementById(`input_${commentId}`);
        inputElement.focus();

        inputElement.addEventListener("keypress", function (event) {
          if (event.key === "Enter") {
            event.preventDefault();
            updateComment(commentId, postid);
          }
        });
        inputElement.addEventListener("keydown", function (event) {
          if (event.key === "Escape") {
            event.preventDefault();
            commentElement.innerHTML = commentText;
          }
        });
      }

      function updateComment(commentId, postId) {
        const inputElement = document.getElementById(`input_${commentId}`);
        const updatedText = inputElement.value;
        const commentElement = document.getElementById(`comment_${commentId}`);
        if (updatedText === "") {
          alert("Comment cannot be empty");
          return;
        }
        commentElement.innerHTML = updatedText;
        fetch(`/dashboard/posts/${postId}/comments/${commentId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ commentText: updatedText }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              console.log("Comment updated successfully");
            } else {
              console.error(data);
              console.error("Failed to update comment", data.error);
            }
          })
          .catch((error) => console.error("Error:", error));
      }

      function addComment(postId, userId, username) {
        const newCommentInput = document.createElement("input");
        newCommentInput.type = "text";
        newCommentInput.id = "new_comment_input";
        newCommentInput.placeholder = "Write your comment here";

        const contentDiv = document.querySelector(".content");
        contentDiv.appendChild(newCommentInput);

        newCommentInput.focus();

        newCommentInput.addEventListener("keypress", function (event) {
          if (event.key === "Enter") {
            event.preventDefault();
            const newCommentText = newCommentInput.value;
            fetch(`/dashboard/posts/${postId}/comments`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                commentText: newCommentText,
                userId: userId,
                postId,
                postId,
              }),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.success) {
                  const newCommentDiv = document.createElement("div");
                  newCommentDiv.className = "comment";
                  newCommentDiv.innerHTML = `
                        <h1>Comment</h1>
                        <p id="comment_${data.commentId}">${newCommentText}</p>
                        <p>Posted by: ${username}</p>
                        <button class="comment-button" onclick="editComment('${data.commentId}', '${postId}')">Update</button>
                        <button class="comment-button" onclick="deleteCommentById('${data.commentId}', '${postId}')">Delete</button>
                    `;

                  const commentContainerDiv =
                    document.querySelector(".comment-container");
                  if (!commentContainerDiv) {
                    const newCommentContainerDiv =
                      document.createElement("div");
                    newCommentContainerDiv.className = "comment-container";
                    contentDiv.appendChild(newCommentContainerDiv);
                    newCommentContainerDiv.appendChild(newCommentDiv);
                  } else {
                    commentContainerDiv.appendChild(newCommentDiv);
                  }

                  contentDiv.removeChild(newCommentInput);

                  const count = document.getElementById("totalcomments");
                  const updatedCount =
                    parseInt(count.textContent.split(" ")[2]) + 1;
                  count.textContent = `Total comments: ${updatedCount}`;
                } else {
                  console.error("Failed to add comment", data.error);
                }
              })
              .catch((error) => console.error("Error:", error));
          }
        });
      }

      async function getTotalLikes(id) {
        try {
          const response = await fetch(`/dashboard/posts/like/${id}/total`, {
            method: "GET",
          });

          if (response.ok) {
            const data = await response.json();
            const totalLikes = data.totalLikes;
            return totalLikes;
          } else {
            throw new Error("Failed to fetch total likes");
          }
        } catch (error) {
          console.error("Error:", error);
        }
      }

      async function likePost(id) {
        const heartIcon = document.getElementById(`heart-icon`);

        fetch(`/dashboard/posts/like/${id}`, {
          method: "POST",
        })
          .then(async (response) => {
            if (response.ok) {
              const totalLikes = document.getElementById(`total-likes`);

              const newLikes = await getTotalLikes(id);
              totalLikes.textContent = `Total likes: ${newLikes}`;

              const likeStatus = await isLiked(id);

              const heartIcon = document.getElementById(`heart-icon`);
              if (likeStatus) {
                heartIcon.classList.remove("far", "fa-heart");
                heartIcon.classList.add("fas", "fa-heart");
              } else {
                heartIcon.classList.remove("fas", "fa-heart");
                heartIcon.classList.add("far", "fa-heart");
              }
            } else {
              console.error("Failed to like post");
            }
          })
          .catch((error) => {
            console.error("Failed to like post:", error);
          });
      }

      async function isLiked(id) {
        try {
          const response = await fetch(`/dashboard/posts/like/${id}/status`, {
            method: "GET",
          });

          if (response.ok) {
            const data = await response.json();
            const likeStatus = data.likeStatus;
            return likeStatus;
          } else {
            throw new Error("Failed to fetch like status");
          }
        } catch (error) {
          console.error("Error:", error);
        }
      }

      async function share(id) {
        fetch(`/dashboard/myposts/${id}/share`)
          .then((response) => {
            if (response.ok) {
              return response.text();
            } else {
              throw new Error("Failed to share post");
            }
          })
          .then((url) => {
            window.location.href = url;
          })
          .catch((error) => {
            console.error(error);
          });
      }

      async function save(postid, userid) {
        const response = await fetch(`/dashboard/posts/save/${postid}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ userid: userid, postid: postid }),
        });

        if (response.ok) {
          const jsonResponse = await response.json();
          alert(jsonResponse.message);
        } else {
          console.error("Error:", response.status);
          alert("Error saving post.");
        }
      }
    </script>
  </head>
  <body>
    <% if(typeof post != "undefined" && typeof user != "undefined") { %>
    <div class="content">
      <h1><%= post.caption %></h1>
      <div class="conteiner">
        <div style="width: 50%; margin-left: 10%; margin-bottom: 50px">
          <p><%= post.description %></p>
          <p id="total-likes">Total likes: <%= post.totallikes %></p>
          <p id="totalcomments">Total comments: <%= post.totalcomments %></p>
          <p>
            Liked:
            <button
              id="like-button"
              class="like-button"
              onclick="likePost('<%= post.id %>')">
              <i id="heart-icon" class="far fa-heart"></i>
            </button>
          </p>

          <script>
            const heartIcon = document.getElementById(`heart-icon`);

            async function checkLikeStatus() {
              const likeStatus = await isLiked("<%= post.id %>");

              if (likeStatus) {
                heartIcon.classList.remove("far", "fa-heart");
                heartIcon.classList.add("fas", "fa-heart");
              } else {
                heartIcon.classList.remove("fas", "fa-heart");
                heartIcon.classList.add("far", "fa-heart");
              }
            }

            checkLikeStatus();
          </script>
          <p>Posted by: <%= user.name %></p>
          <a href="/dashboard/posts">Back to dashboard</a>
          <button
            class="comment-button"
            onclick="addComment('<%= post.id %>', '<%= guest.id %>', '<%= guest.name %>')">
            Add comment
          </button>
          <button class="comment-button" onclick="share('<%= post.id %>')">
            Share
          </button>
          <button
            class="comment-button"
            onclick="save('<%= post.id %>', '<%= guest.id %>')">
            Save
          </button>
        </div>
        <img class="post-image" src="<%= post.imageUrl %>" />
      </div>
      <% if(comments && comments.length > 0) { %>
      <div class="comment-container">
        <% comments.forEach((comment) => { %>
        <div class="comment">
          <h1>Comment</h1>
          <p id="comment_<%= comment.id %>"><%= comment.comment_text %></p>
          <p>Posted by: <%= comment.username %></p>
          <% if (comment.user_id == guest.id){ %>
          <button
            class="comment-button"
            onclick="editComment('<%= comment.id %>', '<%= post.id %>')">
            Update
          </button>
          <button
            class="comment-button"
            onclick="deleteCommentById('<%= comment.id %>', '<%= post.id %>')">
            Delete
          </button>
          <% } %>
        </div>
        <% }); %>
      </div>
      <% } %>
    </div>
    <% } %>
  </body>
</html>
